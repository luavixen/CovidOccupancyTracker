/* src/style/style.scss
	Root SCSS stylesheet, defines styles for all actual UI elements */

@import "theme";
@import "utils";
@import "animation";

/* Styles for all elements */
*, *::before, *::after {
	outline: none; /* Disable ugly default outlines */

	flex-shrink: 0; /* Never shrink when used in a flexbox */

	font-family: 'Open Sans', Arial, Helvetica, sans-serif;
	font-weight: $weight-normal;
}
/* Use the Roboto font for headers */
h1, h2, h3, h4, h5, h6 { font-family: 'Roboto', Arial, Helvetica, sans-serif; }


/* <html>, <body> styles, sets default colors */
html, body {
	@include themed() {
		background-color: t($_level1);
		color: t($_text);
	}
}

/* App.vue styles */
.cot-app {
	position: fixed;
	left: 0; top: 0; right: 0; bottom: 0;
	margin: 0; padding: 0; border: 0;

	@include no-overflow();
	@include animated-color();

	@include themed() {
		background-color: t($_level1);
		color: t($_text);
	}

	/* Make the inner view fill the screen */
	> .cot-app-view { width: 100%; height: 100%; }
}

/* Dashboard.vue styles */
.cot-dashboard {
	display: flex;
	flex-direction: column;

	> .cot-dashboard-body {
		/* Fill all available space */
		flex: 1;

		/* Allow scrollbars */
		overflow-x: hidden;
		overflow-y: auto;
	}
}

/* Header.vue styles */
$header-size: 66px;
$header-max-width: 1000px;
.cot-header {
	width: 100%;
	height: $header-size;

	@include no-overflow();
	@include animated-color();

	@include themed() {
		background-color: t($_accent);
		color: t($_accent-text);
	}

	/* Align content */
	> .cot-header-content {
		display: flex;

		width: 100%;
		max-width: $header-max-width;
		height: $header-size;

		margin-left: auto; margin-right: auto;

		> .cot-header-left { margin-right: auto; }
		> .cot-header-section > * { vertical-align: top; }
	}
}
/* HeaderBrand.vue styles */
.cot-header-brand {
	display: inline-flex;
	align-items: center;

	height: 100%;

	margin-left: $margin-medium;

	> .cot-header-brand-text {
		margin: 0;

		@include no-select();
		@include one-line();
	}
}
/* HeaderLocation.vue styles */
.cot-header-location {
	display: inline-flex;
	align-items: center;

	height: 100%;

	> .cot-header-location-inner {
		display: flex;
		flex-direction: column;

		text-align: right;

		> p {
			margin: 0;

			font-weight: $weight-bold;

			@include no-select();
		}
		> .cot-header-location-title { font-size: 0.75em; }
	}
}

/* TextButton.vue styles */
.cot-button-text {
	display: inline-block;

	margin: $margin-small;

	padding-left: 6px; padding-right: 6px;
	padding-top: 2px; padding-bottom: 2px;

	border-radius: $radius-small;
	border-width: $border-thin;
	border-style: solid;

	transition: $animated-color, $animated-border;

	@include pointer();

	@include themed() {
		border-color: t($_accent);
		background-color: t($_accent);
		color: t($_accent-text);
	}

	> span {
		@include no-select();
		@include one-line-ellipsis();

		font-weight: $weight-bold;
	}
}
/* No cursor when disabled */
.cot-button-text.cot-button-disabled {
	* { cursor: not-allowed; }
}
/* Uni-theme hover styles */
@mixin textbutton-default-hover() {
	@include themed() {
		border-color: t($_accent-focus);
		background-color: t($_accent-focus);
	}
}
@include can-hover() { .cot-button-text:hover {
	@include textbutton-default-hover();
} }
.cot-button-text[data-focus-visible-added],
.cot-button-text.cot-button-pressed {
	@include textbutton-default-hover();
}
/* Light TextButton styles */
@mixin textbutton-light-default() {
	background-color: transparent;
	color: $accent;
}
@mixin textbutton-light-hover() {
	background-color: $accent-hover;
}
@mixin textbutton-light-pressed() {
	background-color: $accent-pressed;
}
@mixin textbutton-light-disabled() {
	border-color: $gray-400;
	background-color: $gray-400;
	color: $gray-900;
}
.theme-light {
	.cot-button-text {
		@include textbutton-light-default();
	}
	@include can-hover() { .cot-button-text:hover {
		@include textbutton-light-hover();
	} }
	.cot-button-text[data-focus-visible-added] {
		@include textbutton-light-hover();
	}
	.cot-button-text.cot-button-pressed {
		@include textbutton-light-hover();
		@include textbutton-light-pressed();
	}
	.cot-button-text.cot-button-disabled {
		@include textbutton-light-disabled();
	}
}
/* Dark TextButton styles */
@mixin textbutton-dark-focus() {
	border-color: $white;
}
@mixin textbutton-dark-pressed() {
	border-color: $accent-dark;
	background-color: $accent-dark;
}
@mixin textbutton-dark-disabled() {
	border-color: $gray-700;
	background-color: $gray-700;
}
.theme-dark {
	.cot-button-text[data-focus-visible-added] {
		@include textbutton-dark-focus();
	}
	.cot-button-text.cot-button-pressed {
		@include textbutton-dark-pressed();
	}
	.cot-button-text.cot-button-disabled {
		@include textbutton-dark-disabled();
	}
}

/* IconButton.vue styles */
$iconbutton-outer: 48px;
$iconbutton-inner: 32;
$iconbutton-inner-pressed: 28;
/* Initial button styles */
.cot-button-image {
	display: inline-block;

	width: $iconbutton-outer;
	height: $iconbutton-outer;

	margin: $margin-small;

	border-radius: $radius-50;
	border-width: $border-thin;
	border-style: solid;
	border-color: transparent;

	background-color: transparent;

	transition: $animated-color, $animated-border;

	@include pointer();

	> .cot-button-image-icon {
		display: flex;
		justify-content: center;
		align-items: center;

		width: 100%;
		height: 100%;

		@include no-select();

		> svg {
			display: block;

			transform: scale($iconbutton-inner / 24);

			@include animated-transform();

			path {
				@include themed() {
					fill: t($_text);
				}
			}
		}
	}
}
/* Scale image size down when pressed */
.cot-button-image.cot-button-pressed > .cot-button-image-icon > svg {
	transform: scale($iconbutton-inner-pressed / 24);
}
/* Accent IconButton theme, for backgrounds that use accent colors */
@mixin iconbutton-accent-default() {
	.cot-button-image-icon > svg path {
		@include themed() {
			fill: t($_accent-text) !important;
		}
	}
}
@mixin iconbutton-accent-hover() {
	@include themed() {
		background-color: t($_hover-hover) !important;
	}
}
@mixin iconbutton-accent-focus() {
	border-color: $white !important;
}
@mixin iconbutton-accent-pressed() {
	@include themed() {
		border-color: t($_hover_hover) !important;
		background-color: t($_hover_active) !important;
	}
}
.cot-button-image.cot-button-image-accent { @include iconbutton-accent-default(); }
@include can-hover() { .cot-button-image.cot-button-image-accent:hover {
	@include iconbutton-accent-hover();
} }
.cot-button-image.cot-button-image-accent[data-focus-visible-added] {
	@include iconbutton-accent-hover();
	@include iconbutton-accent-focus();
}
.cot-button-image.cot-button-image-accent.cot-button-pressed {
	@include iconbutton-accent-hover();
	@include iconbutton-accent-pressed();
}
/* Light IconButton theme */
@mixin iconbutton-light-hover() {
	background-color: $accent-hover;
}
@mixin iconbutton-light-focus() {
	border-color: $accent;
}
@mixin iconbutton-light-pressed() {
	border-color: $accent;
	background-color: $accent-pressed;
}
.theme-light {
	@include can-hover() { .cot-button-image:hover {
		@include iconbutton-light-hover();
	} }
	.cot-button-image[data-focus-visible-added] {
		@include iconbutton-light-hover();
		@include iconbutton-light-focus();
	}
	.cot-button-image.cot-button-pressed {
		@include iconbutton-light-hover();
		@include iconbutton-light-pressed();
	}
}
/* Dark IconButton theme */
@mixin iconbutton-dark-hover() {
	background-color: $hover-shallow;
}
@mixin iconbutton-dark-focus() {
	border-color: $white;
}
@mixin iconbutton-dark-pressed() {
	border-color: $hover-shallow;
	background-color: $hover-medium;
}
.theme-dark {
	@include can-hover() { .cot-button-image:hover {
		@include iconbutton-dark-hover();
	} }
	.cot-button-image[data-focus-visible-added] {
		@include iconbutton-dark-hover();
		@include iconbutton-dark-focus();
	}
	.cot-button-image.cot-button-pressed {
		@include iconbutton-dark-hover();
		@include iconbutton-dark-pressed();
	}
}

/* BigButton.vue styles */
$bigbutton-size: 72px;
$bigbutton-transform-none: scale(1);
$bigbutton-transform-hover: scale(1.1);
$bigbutton-transform-pressed: scale(0.8);
.cot-button-big {
	display: block;

	height: $bigbutton-size;

	padding: $padding-medium;
	margin: $margin-medium;

	border-radius: $radius-large;
	border-width: $border-thick;
	border-style: solid;

	box-shadow: none;

	background-color: transparent;

	transition: $animated-color, $animated-border, $animated-shadow;

	@include pointer();

	@include themed() {
		border-color: t($_accent);
	}

	> .cot-button-big-icon {
		width: $bigbutton-size;
		height: $bigbutton-size;

		margin-left: auto; margin-right: auto;

		@include no-select();

		> svg {
			display: block;

			transform: $bigbutton-transform-none;

			@include animated-transform();

			path {
				@include themed() {
					fill: t($_text);
				}
			}
		}
	}
}
/* Default BigButton theme styles */
@mixin bigbutton-default-hover() {
	@include themed() {
		background-color: t($_accent-hover);
	}
	> .cot-button-big-icon > svg {
		transform: $bigbutton-transform-hover;
	}
}
@mixin bigbutton-default-pressed() {
	@include themed() {
		background-color: t($_accent-pressed);
	}
	> .cot-button-big-icon > svg {
		transform: $bigbutton-transform-pressed;
	}
}
@include can-hover() { .cot-button-big:hover {
	@include bigbutton-default-hover();
} }
.cot-button-big[data-focus-visible-added] {
	@include bigbutton-default-hover();
}
.cot-button-big.cot-button-pressed {
	@include bigbutton-default-hover();
	@include bigbutton-default-pressed();
}
/* Light BigButton theme */
@mixin bigbutton-light-focus() {
	box-shadow: 0 0 0 $border-thick $accent-light;
}
.theme-light {
	.cot-button-big[data-focus-visible-added] {
		@include bigbutton-light-focus();
	}
}
/* Dark BigButton theme */
@mixin bigbutton-dark-focus() {
	box-shadow: 0 0 0 $border-thick $white;
}
.theme-dark {
	.cot-button-big[data-focus-visible-added] {
		@include bigbutton-dark-focus();
	}
}

/* RadioButton.vue styles */
$radiobutton-size-total: 42px;
$radiobutton-size-outer: 18px;
$radiobutton-size-inner: 10px;
/* RadioButton styles */
.cot-button-radio {
	display: flex;

	height: $radiobutton-size-total;

	/* Always show the pointer cursor when hovering over this element */
	@include pointer();

	/* Circle button container styles */
	.cot-button-radio-circle-container {
		/* Vertically center circle */
		display: flex;
		align-items: center;

		/* Take 100% available height */
		height: 100%;

		> .cot-button-radio-circle {
			/* Big enough for the outer button ring + border size */
			width: $radiobutton-size-outer + ($border-thick * 2);
			height: $radiobutton-size-outer + ($border-thick * 2);

			/* Relative positioning for absolute .cot-button-radio-outer::before */
			position: relative;

			/* Margins on either side */
			margin-left: $margin-medium; margin-right: $margin-medium;

			/* Outer ring styles */
			> .cot-button-radio-outer {
				/* Center inner dot (no matter the size) */
				display: flex;
				align-items: center;
				justify-content: center;

				width: $radiobutton-size-outer;
				height: $radiobutton-size-outer;

				border-radius: $radius-50;
				border-width: $border-thick;
				border-style: solid;

				@include animated-border();

				@include themed() {
					border-color: t($_text);
				}

				/* Inner circle styles */
				> .cot-button-radio-inner {
					/* Will be resized later */
					width: 0;
					height: 0;

					border-radius: $radius-50;

					background-color: transparent;

					transition:
						$animated-color,
						width $transition-short,
						height $transition-short;
				}
			}

			/* Hover styles */
			> .cot-button-radio-outer::before {
				/* Show empty content that can be styled */
				content: "";

				display: block;

				/* Force the width and height exactly */
				width: $radiobutton-size-total;
				min-width: $radiobutton-size-total;
				max-width: $radiobutton-size-total;
				height: $radiobutton-size-total;
				min-height: $radiobutton-size-total;
				max-height: $radiobutton-size-total;

				/* Don't mess up positioning of the inner dot */
				position: absolute;

				border-radius: $radius-50;
				border-width: $border-thin;
				border-style: solid;
				border-color: transparent;

				background-color: transparent;

				@include animated();
			}
		}
	}

	/* Label container styles */
	> .cot-button-radio-label-container {
		/* Center the text vertically */
		display: flex;
		align-items: center;

		/* Fix for not shrinking far enough */
		min-width: 0;

		/* Prevent overflow */
		flex: 1 1 0;

		/* Label styles */
		> .cot-button-radio-label {
			display: block;

			/* Stay within bounds ! */
			width: 100%;
			max-width: 100%;

			@include no-select();
			@include one-line-ellipsis();
		}
	}
}
/* Use accent color when checked and show inner dot*/
.cot-button-radio.cot-button-radio-checked > .cot-button-radio-circle-container > .cot-button-radio-circle > .cot-button-radio-outer {
	@include themed() {
		border-color: t($_accent);
	}

	/* Show inner dot */
	> .cot-button-radio-inner {
		width: $radiobutton-size-inner;
		height: $radiobutton-size-inner;

		@include themed() {
			background-color: t($_accent);
		}
	}
}
/* Light RadioButton theme */
@mixin radiobutton-light-hover() {
	.cot-button-radio-outer::before {
		background-color: $accent-hover;
	}
}
@mixin radiobutton-light-focus() {
	.cot-button-radio-outer::before {
		border-color: $accent;
	}
}
.theme-light {
	@include can-hover() { .cot-button-radio:hover {
		@include radiobutton-light-hover();
	} }
	.cot-button-radio[data-focus-visible-added] {
		@include radiobutton-light-hover();
		@include radiobutton-light-focus();
	}
	.cot-button-radio.cot-button-pressed {
		@include radiobutton-light-hover();
	}
}
/* Dark RadioButton theme */
@mixin radiobutton-dark-hover() {
	.cot-button-radio-outer::before {
		background-color: $hover-shallow;
	}
}
@mixin radiobutton-dark-focus() {
	.cot-button-radio-outer::before {
		border-color: $white;
	}
}
.theme-dark {
	@include can-hover() { .cot-button-radio:hover {
		@include radiobutton-dark-hover();
	} }
	.cot-button-radio[data-focus-visible-added] {
		@include radiobutton-dark-hover();
		@include radiobutton-dark-focus();
	}
	.cot-button-radio.cot-button-pressed {
		@include radiobutton-dark-hover();
	}
}

/* RadioList.vue styles */
.cot-radios { width: 100%; }

/* NumberControl.vue styles */
$number-size: 76px;
$number-font-size: 56px;
.cot-number {
	/* Never grow bigger then the screen */
	max-width: 100%;

	/* Number display styles */
	.cot-number-display {
		display: flex;
		align-items: center;

		height: $number-size;

		margin: $margin-medium;

		border-radius: $radius-large;
		border-width: $border-thick;
		border-style: solid;

		@include animated-color();

		@include themed() {
			border-color: t($_accent);
		}

		/* Number display text styles */
		> .cot-number-display-text-container {
			/* Align center with edit */
			margin-left: $number-size;

			/* Consume available space */
			flex: 1;

			/* Inner text styling */
			> .cot-number-display-text {
				/* No top/bottom margins */
				margin-top: 0; margin-bottom: 0;

				/* Set font size and center the text */
				font-size: $number-font-size;
				text-align: center;

				@include no-select();
				@include one-line-ellipsis();
			}
		}
		/* Number display edit button box styles */
		> .cot-number-display-edit {
			/* Center edit button */
			display: flex;
			align-items: center;
			justify-content: center;

			/* Force width/height square */
			width: $number-size;
			height: $number-size;
		}
	}
}

/* NumberInput.vue styles */
.cot-input-number {
	display: flex;

	/* Replace default styles of the <input type="number"> */
	> .cot-input-number-input {
		box-sizing: border-box;

		display: block;

		width: 100%;
		min-width: 100%;
		max-width: 100%;

		flex: 1;

		margin: 0;
		padding: $padding-small;

		border-radius: $radius-large;
		border-width: $border-thin;
		border-style: solid;

		background-color: transparent;

		box-shadow: none;

		@include animated();

		@include themed() {
			color: t($_text);
			border-color: t($_accent);
		}

		font-size: 2em;
		text-align: center;
	}
	/* Additional focus styles */
	> .cot-input-number-input:focus {
		@include themed() {
			background-color: t($_accent-hover);
		}
	}

	/* Disable rendering of the inc/dec buttons */
	.cot-input-number-input::-webkit-outer-spin-button,
	.cot-input-number-input::-webkit-inner-spin-button {
		-webkit-appearance: none;
		margin: 0;
	}
	.cot-input-number-input[type=number] { -moz-appearance: textfield; }
}
/* NumberInput borders thicker on dark theme */
.theme-dark .cot-input-number-input { border-width: $border-thick; }

/* Modal.vue styles */
$modal-max-width: 500px;
/* Full-screen layer styles */
.cot-modal-layer {
	/* Fill the whole page */
	position: fixed;
	left: 0;
	top: 0;
	right: 0;
	bottom: 0;
	margin: 0; padding: 0; border: 0;

	/* Display on-top of everything */
	z-index: 1000;

	/* Display scrollbars if required */
	overflow-x: hidden;
	overflow-y: auto;

	background-color: rgba(0, 0, 0, 0.5);
}
/* Modal container styles */
.cot-modal-container {
	/* Include padding in width/height */
	box-sizing: border-box;

	/* Center the modal vertically */
	display: flex;
	align-items: center;

	/* Expand to fill all available width */
	width: 100%;
	max-width: 100%;
	/* Expand to fill screen height, but expand further to show the whole modal if needed */
	min-height: 100%;

	padding: $padding-medium;
}
/* Modal styles */
.cot-modal {
	/* Include padding in width/height */
	box-sizing: border-box;

	width: 100%;
	max-width: $modal-max-width;

	/* Center horizontally */
	margin-left: auto; margin-right: auto;

	padding: $padding-medium;

	border-radius: $radius-large;
	border-width: $border-thin;
	border-style: solid;

	@include animated-color();
	@include no-overflow();

	@include themed() {
		border-color: t($_level2);
		background-color: t($_level1);
		color: t($_text);
	}
}

/* ModalHeader.vue styles */
.cot-modal-header {
	display: flex;

	width: 100%;

	> h2 {
		display: block;

		/* Hide top margin */
		margin-top: 0;

		flex: 1;

		@include no-select();
		@include one-line-ellipsis();
	}
	> .cot-button-image {
		/* Jam the IconButton into the top-right corner */
		margin-left: 0; margin-bottom: 0;
		margin-top: -$margin-small; margin-right: -$margin-small;
	}
}

/* SettingsModal.vue styles */
.cot-modal-settings {
	/* Footer styles */
	.cot-modal-settings-footer {
		display: flex;
		/* Center text and other items */
		align-items: center;

		/* Fill available width */
		width: 100%;

		/* Hide margins on the theme toggle button */
		> .cot-modal-settings-toggletheme {
			margin: 0;
		}
		/* Copyright message styles */
		> .cot-modal-settings-copyright {
			/* Float to the right */
			margin-left: auto;

			font-size: 0.75em;

			@include no-select();

			@include themed() {
				color: t($_text-disabled);
			}
		}
	}
}

/* EditModal.vue styles */
.cot-modal-edit {
	.cot-modal-edit-buttons {
		display: flex;
		justify-content: flex-end;

		margin-top: $margin-small; margin-bottom: -$margin-small;
		margin-left: 0; margin-right: -$margin-small;
	}
}

/* Container.vue styles */
$container-max-width: 800px;
.cot-container {
	display: flex;
	align-items: center;

	width: 100%;
	max-width: $container-max-width;
	min-height: 100%;

	/* Center horizontally */
	margin-left: auto; margin-right: auto;

	> * { flex: 1; }
}
